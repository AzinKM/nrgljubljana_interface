#!/usr/bin/env perl
use strict;
use warnings;
use Math::Trig;
my $pi = pi();

my $Nz = getparam("Nz");
my $min = getparam("broaden_min");
my $max = getparam("broaden_max");
my $ratio = getparam("broaden_ratio");
my $T = getparam("T");
my $alpha = getparam("alpha");
my $gamma = getparam("gamma");
print "Nz=$Nz min=$min max=$max ratio=$ratio T=$T alpha=$alpha gamma=$gamma\n";
my $pr = "FDM_dens"; # prefix

avg("spec_${pr}_A_d-A_d.bin",    "A_imp_00");
avg("spec_${pr}_A_d-A_d.bin",    "A_imp_11");
avg("spec_${pr}_self_d-A_d.bin", "B_imp_00");
avg("spec_${pr}_self_a-A_a.bin", "B_imp_11");

scaley("A_imp_00", -$pi, "imG_imp_00");
scaley("A_imp_11", -$pi, "imG_imp_11");
scaley("B_imp_00", -$pi, "imF_imp_00");
scaley("B_imp_11", -$pi, "imF_imp_11");

kk("imG_imp_00");
kk("imG_imp_11");
kk("imF_imp_00");
kk("imF_imp_11");

avg("corr_${pr}_n_d-n_d.bin",    "imNN_imp_00");
avg("corr_${pr}_n_a-n_a.bin",    "imNN_imp_11");
avg("corr_${pr}_n_d-n_a.bin",    "imNN_imp_01");
avg("corr_${pr}_n_a-n_d.bin",    "imNN_imp_10");
avg("spin_${pr}_sigma_d-sigma_d.bin", "imSS_imp_00");
avg("spin_${pr}_sigma_a-sigma_a.bin", "imSS_imp_11");
avg("spin_${pr}_sigma_d-sigma_a.bin", "imSS_imp_01");
avg("spin_${pr}_sigma_a-sigma_d.bin", "imSS_imp_10");

kk("imNN_imp_00");
kk("imNN_imp_11");
kk("imNN_imp_01");
kk("imNN_imp_10");
kk("imSS_imp_00");
kk("imSS_imp_11");
kk("imSS_imp_01");
kk("imSS_imp_10");

sub kk {
        my $in = shift;
        $in .= ".dat";
        my $out;
        ($out = $in) =~ s/^im/re/;
        -e $in or die "Input file not found: $in. Stopped";
        system("kk $in $out");
        -e $out or die "Output file not found:$ out. Stopped";
    }

sub avg
{
    my $in = shift;
    my $out = shift;
    $out .= ".dat";
    unlink "$out";
    system "broaden -x $gamma -m $min -M $max -r $ratio   $in $Nz $alpha $T 1e-9";
    if ($?) {
	system "echo Broadening of $in failed: $? >>>ERROR";
	die "broaden failed: $?\n";                                                                                                                                                                                                                
    }
    my $specfn = "spec.dat";
    if (!-e $specfn) {
	system "echo Failed to produce broadened spectrum $specfn -> $out. >>>ERROR";
	die "broaden failed\n";
    }
    system "mv $specfn $out";
}

sub getparam
{
    my $keyword = shift;
    my $fn = "param";
    open (F, "<", $fn) or die "Can't open $fn for reading: $!\n";
    while (<F>) {
	if (/^$keyword=(.*)/) {
	    return $1;
	}
    }
    close F;
    die "Parsing failure: $keyword not found.";
}

sub scaley
{
    my $fnin = shift;
    my $factor = eval(shift);
    my $fnout = shift;
    $fnin .= ".dat";
    $fnout .= ".dat";
    open (F, "<", $fnin) or die "Can't open $fnin for reading: $!\n";
    open (G, ">", $fnout) or die "Can't open $fnout for writing: $!\n";
    while (<F>) {
	if (!/^#/) {
	    chomp;
	    my @d = split;
	    $d[1] = $d[1] * $factor;
	    print G "@d\n";
	} else {
	    print G;
	}
    }
    close G;
    close F;
}
